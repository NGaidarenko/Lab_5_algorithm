def dfs_find_all_paths(graph, start, end, path=[], paths=[]):
    path = path + [start]

    if start == end:
        paths.append(path)

    for station in graph.get(start, []):
        if station not in path:
            dfs_find_all_paths(graph, station, end, path, paths)

    return paths

# Граф метро Санкт-Петербурга (представлен в виде словаря)
metro_graph_spb = {
    "Площадь Восстания": ["Маяковская", "Владимирская", "Чернышевская"],
    "Маяковская": ["Гостиный двор", "Площадь АН.1"],
    "Владимирская": ["Достоевская", "Пушкинская"],
    "Гостиный двор": ["Невский проспект", "Василеостровская"],
    "Площадь АН.1": ["Елизаровская", "Площадь АН.2"],
    "Достоевская": ["Спаская", "Лиговский проспект", "Владимирская"],
    "Пушкинская": ["ТИ.1", "Звенигородская"],
    "Невский проспект": ["Гостиный двор", "Сенная площадь", "Горьковская"],
    "Площадь АН.2": ["Площадь АН.1", "Лиговский проспект", "Новочеркасская"],
    "Лиговский проспект": ["Площадь АН.2", "Достоевская"],
    "Спаская": ["Садовая", "Сенная площадь", "Достоевская"],
    "Сенная площадь": ["Спасская", "Невский проспект", "Садовая"],
    "Садовая": ["Спаская", "Сенная площадь", "Адмиралтейская", "Звенигородская"],
    "ТИ.1": ["ТИ.2", "Балтийская"],
    "ТИ.2": ["ТИ.1", "Сенная площадь", "Фрунзенская"],
    "Звенигородская": ["Садовая", "Обводный канал", "Пушкинская"]
}

start_station = "Площадь Восстания"

# Найдем все конечные станции метро в Санкт-Петербурге
end_stations = ["Новочеркасская"]

# , "Василеостровская", "Адмиралтейская", "Балтийская", "Фрунзенская", "Чернышевская", "Горьковская", "Обводный канал"
# Находим все пути от начальной станции до конечных станций
all_paths = []
for end_station in end_stations:
    paths_to_end_station = dfs_find_all_paths(metro_graph_spb, start_station, end_station)
    all_paths.extend(paths_to_end_station)

# Выводим все найденные пути
for i, path in enumerate(all_paths, 1):
    print(f"Путь {i}: {' -> '.join(path)}")